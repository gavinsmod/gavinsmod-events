plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'maven-publish'
    id 'signing'
    id 'org.jetbrains.kotlin.jvm' version '1.8.20'
}

version = project.mod_version
group = project.maven_group

repositories {
    mavenCentral()
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

        // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 18
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact javadocJar
            pom {
                name = "${project.maven_group}:${project.archives_base_name}"
                description = "A UI library for Minecraft aimed for developers."
                url = "https://github.com/gavinsmod/gavinsmod-events"
                license {
                    name = "MIT"
                    url = "https://opensource.org/licenses/MIT"
                }
                developers {
                    developer {
                        name = "Gavin Pease"
                        email = "gcpease@peasenet.com"
                        organization = "GT3CH1"
                        organizationUrl = "https://github.com/GT3CH1"
                    }
                }
                scm {
                    connection = "scm:git:git://github.com/gavinsmod/gavinsmod-events.git"
                    developerConnection = "scm:git:ssh://github.com:gavinsmod/gavinsmod-events.git"
                    url = "https://github.com/gavinsmod/gavinsmod-events/tree/master"
                }
            }

        }
    }
    repositories {
        maven {
            name = "SonaType"
            url = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")
            credentials {
                username = project.findProperty("ossrhUsername")
                password = project.findProperty("ossrhPassword")
            }
        }
    }
}
kotlin {
    jvmToolchain {
        languageVersion.set(JavaLanguageVersion.of(20))
    }
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "18"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "18"
    }
}

signing {
    useGpgCmd()
    sign publishing.publications.mavenJava
}